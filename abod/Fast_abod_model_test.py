import joblibimport pandas as pdimport numpy as npimport sysfrom matplotlib import pyplot as pltfrom sklearn.metrics import accuracy_score, roc_auc_scorefrom sklearn.preprocessing import LabelEncoder, Normalizerfrom abod.edmund_abod import FastABODsys.path.append('../model/')sys.path.append('../abod/')sys.path.append('../image/')import osdef fast_abod_model_test(raw_data_filename1, Frace, recent_point, Abnormal_proportion):    # print("hhhhh")    url = os.path.abspath(os.path.dirname(os.path.dirname(__file__))) + '/model/abod.model'    # print(url)    abod = joblib.load(url)    print("Loding raw data ...")    raw_data1 = pd.read_csv(raw_data_filename1, header=None, low_memory=False)    raw_data1 = raw_data1.sample(frac=Frace)    def lookData(raw_data):        last_colum_index = raw_data.shape[1] - 1        print("print data labels:")        print(raw_data[last_colum_index].value_counts())    lookData(raw_data1)    train_data = raw_data1    for column in train_data.columns:        if train_data[column].dtype == type(object):            le = LabelEncoder()  # 标签编码,即是对不连续的数字或者文本进行编号,转换成连续的数值型变量            train_data[column] = le.fit_transform(train_data[column])    X1 = train_data.iloc[:, :train_data.shape[1] - 1]  # pandas中的iloc切片是完全基于位置的索引    Y1 = train_data.iloc[:, train_data.shape[1] - 1:]    scaler = Normalizer().fit(X1)    trainX = scaler.transform(X1)    X_train = np.array(trainX)    y_train = np.array(Y1)    # 3333333333333333    F = FastABOD(X_train, k=recent_point)    print(F)    Afaf = F.fast_abod()    a = np.argsort(Afaf)    x = range(len(Afaf))    y = Afaf    plt.plot(x, y, "g", marker='D')    plt.xlabel("sample")    plt.ylabel("abnormal score")    plt.title("The abnormal score of each sample")    plt.legend(loc="lower right")    plt.savefig('../image/fastabod_test.png')    # plt.show()    # 异常占比 0.12    y_pred = [0 for _ in range(len(a))]    for y in a[-int(len(a) * Abnormal_proportion):]:        y_pred[y] = 1    print(y_pred)    acc = accuracy_score(y_train, y_pred)    auc_score = roc_auc_score(y_train, y_pred)    print("准确率： ", acc)    print("AUC:", auc_score)if __name__ == '__main__':    fast_abod_model_test('/Users/luolang/CyberSecurityExperiment/data/NSL_KDD/KDDTest+_blance_del.csv', 0.1, 20, 0.12)